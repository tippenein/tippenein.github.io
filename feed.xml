<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"
    xmlns:dc="http://purl.org/dc/elements/1.1/">
    <channel>
        <title>Brady Ouren's home page feed.</title>
        <link>http://brdyorn.com</link>
        <description><![CDATA[Brady Ouren's home page feed.]]></description>
        <atom:link href="http://brdyorn.com/feed.xml" rel="self"
                   type="application/rss+xml" />
        <lastBuildDate>Fri, 29 Jul 2016 00:00:00 UT</lastBuildDate>
        <item>
    <title>Writing a simple cli with Wreq</title>
    <link>http://brdyorn.com/posts/2016-07-29-simple-client-with-wreq.html</link>
    <description><![CDATA[<div class="info">
  <!-- Posted on Jul 29, 2016 -->
  
</div>

<div class="post-body">
  <div class="post-meta">
    <em class="post-date pull-right"> - Jul 29, 2016</em>
    <h2 class="post-title">Writing a simple cli with Wreq</h2>
  </div>
  <h3 id="starter-project">Starter project</h3>
<p>I remember when I started programming in python. I looked for anything I could write as a CLI or automate in some way, so in the spirit of that, I decided to write a bit about doing the same using haskell libraries.</p>
<p>I replaced monosnap functionality (sharing screenshots) with this script awhile back. It’s generically useful and <a href="https://github.com/tippenein/imgup/blob/master/lib/Imgup.hs">here is the whole of it</a> if you’re only interested in the source.</p>
<p>Also, there’s a deeper dive into Wreq <a href="http://www.serpentine.com/wreq/tutorial.html">here</a> if you find this cursory intro lacking</p>
<h3 id="bam-some-code">Bam! Some code</h3>
<p>The important imports:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">import </span><span class="dt">Data.Monoid</span> ((&lt;&gt;)) <span class="co">-- just for glueing together Text&#39;s</span>
<span class="kw">import </span><span class="dt">Network.Wreq</span>       <span class="co">-- the request library</span>
<span class="kw">import </span><span class="dt">Control.Lens</span>       <span class="co">-- setting and getting params/headers/etc</span>
<span class="kw">import </span><span class="dt">Data.Aeson.Lens</span>    <span class="co">-- same</span></code></pre></div>
<p>Since the main thing this script does is upload a photo anonymously to imgur, we’ll start with that function.</p>
<h3 id="the-request">The Request</h3>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">uploadAndReturnUrl ::</span> <span class="dt">IO</span> <span class="dt">String</span>
uploadAndReturnUrl <span class="fu">=</span> <span class="kw">do</span>
  imagePath <span class="ot">&lt;-</span> parseArgs
  cid <span class="ot">&lt;-</span> clientId
  <span class="kw">let</span> authHeader <span class="fu">=</span> defaults <span class="fu">&amp;</span> header <span class="st">&quot;Authorization&quot;</span> <span class="fu">.~</span> [<span class="st">&quot;Client-ID&quot;</span> <span class="fu">&lt;&gt;</span> <span class="st">&quot; &quot;</span> <span class="fu">&lt;&gt;</span> cid]
  <span class="kw">let</span> payload <span class="fu">=</span> [ partText <span class="st">&quot;type&quot;</span> <span class="st">&quot;file&quot;</span>
                , partFile <span class="st">&quot;image&quot;</span> imagePath
                ]
                                  
  res <span class="ot">&lt;-</span> postWith authHeader <span class="st">&quot;https://api.imgur.com/3/image.json&quot;</span> payload
  <span class="kw">let</span> guid <span class="fu">=</span> res <span class="fu">^.</span> responseBody <span class="fu">.</span> key <span class="st">&quot;data&quot;</span> <span class="fu">.</span> key <span class="st">&quot;id&quot;</span> <span class="fu">.</span> _<span class="dt">String</span>
  return <span class="fu">$</span> <span class="st">&quot;http://imgur.com/&quot;</span> <span class="fu">++</span> T.unpack guid</code></pre></div>
<p>Let’s talk about what might be confusing here. The declaration of <code>authHeader</code>; what is that?</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="co">-- in this context, simply a merge </span>
<span class="ot">(&amp;) ::</span> a <span class="ot">-&gt;</span> (a <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> b

<span class="co">-- build the header to combine with the defaults :: Options</span>
<span class="ot">header ::</span> <span class="dt">HeaderName</span> <span class="ot">-&gt;</span> ([<span class="dt">ByteString</span>] <span class="ot">-&gt;</span> f [<span class="dt">ByteString</span>]) <span class="ot">-&gt;</span> <span class="dt">Options</span> <span class="ot">-&gt;</span> <span class="dt">Options</span></code></pre></div>
<p>If you wanted to, you could think of this as an equivalent to the ruby code:</p>
<div class="sourceCode"><pre class="sourceCode ruby"><code class="sourceCode ruby">defaults = {<span class="st">:params</span> =&gt; [], <span class="st">:headers</span> =&gt; []}
defaults[<span class="st">:headers</span>].merge({ <span class="st">:Authorization</span> =&gt; <span class="st">&quot;Client-ID </span><span class="ot">#{</span>cid<span class="ot">}</span><span class="st">&quot;</span> })</code></pre></div>
<p>Fortunately, our code using Lens’ is much more fail-safe. (you could read more <a href="http://lens.github.io/tutorial.html">here</a> or one of the plethora of other lens tutorials online)</p>
<p>The actual post is pretty self explanatory if you know what <code>authHeader</code> and <code>payload</code> are, but here’s the type sig anyway:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">postWith ::</span> <span class="dt">Postable</span> a <span class="ot">=&gt;</span> <span class="dt">Options</span> <span class="ot">-&gt;</span> <span class="dt">String</span> <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> <span class="dt">IO</span> (<span class="dt">Response</span> <span class="dt">ByteString</span>)</code></pre></div>
<p>The <code>Postable</code> typeclass refers to our <code>[Part]</code> which we constructed in the payload declaration, nbd.</p>
<h3 id="the-response">The Response</h3>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">res <span class="fu">^.</span> responseBody <span class="fu">.</span> key <span class="st">&quot;data&quot;</span> <span class="fu">.</span> key <span class="st">&quot;id&quot;</span> <span class="fu">.</span> _<span class="dt">String</span></code></pre></div>
<p>We use <code>^.</code> to pull out the image id returned from imgur. Unfortunately, lens’ compose left to right, unlike normal functions in haskell so this is <code>responseBody.data.id</code></p>
<p>The equivalent ruby code might be something like:</p>
<div class="sourceCode"><pre class="sourceCode ruby"><code class="sourceCode ruby">response.body[<span class="st">:data</span>][<span class="st">:id</span>]</code></pre></div>
<p>Again, ours is a bit safer.</p>
<h3 id="wrap-up">Wrap Up</h3>
<p>There’s one other piece which grabs the most recent screenshot.</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">getRecentPath ::</span> <span class="dt">IO</span> FilePath
getRecentPath <span class="fu">=</span> <span class="kw">do</span>
  home <span class="ot">&lt;-</span> getHomeDirectory
  d <span class="ot">&lt;-</span> return (joinPath [home, <span class="st">&quot;Desktop&quot;</span>])
  files <span class="ot">&lt;-</span> globDir1 (compile <span class="st">&quot;Screen Shot*&quot;</span>) d
  <span class="kw">case</span> headMaybe (reverse (sort files)) <span class="kw">of</span> 
    <span class="dt">Nothing</span> <span class="ot">-&gt;</span> error <span class="st">&quot;no recent screenshots&quot;</span>
    <span class="dt">Just</span> a <span class="ot">-&gt;</span> return a</code></pre></div>
<p>This could be improved by returning an <code>Either String FilePath</code> instead of raising an error, but if we stopped and optimized every chance we had in haskell we’d never finish writing what we started.</p>
<p>At the end of all this, we can screen cap and pop over to a terminal:</p>
<pre class="shell"><code>imgup --screenshot | pbcopy</code></pre>
<p>Now we have an imgur link in our copy buffer which (for me) completely replaces monosnap’s functionality.</p>

  <div class="pager">
    <ul class="list-unstyled list-inline">
      
        <li class="previous left">
          <a class="button" href="/posts/2016-06-05-monoidal-sum.html" data-toggle="tooltip" data-placement="top" title="Previous Post">&larr; Previous Post</a>
        </li>
      

      
        <li class="next right">
          <a class="button" href="" data-toggle="tooltip" data-placement="top" title="Next Post">Next Post &rarr;</a>
        </li>
      
    </ul>
  </div>
  <br>
  <br>
</div>
]]></description>
    <pubDate>Fri, 29 Jul 2016 00:00:00 UT</pubDate>
    <guid>http://brdyorn.com/posts/2016-07-29-simple-client-with-wreq.html</guid>
    <dc:creator>Brady Ouren</dc:creator>
</item>
<item>
    <title>Exploring monoids for sum averages</title>
    <link>http://brdyorn.com/posts/2016-06-05-monoidal-sum.html</link>
    <description><![CDATA[<div class="info">
  <!-- Posted on Jun  5, 2016 -->
  
</div>

<div class="post-body">
  <div class="post-meta">
    <em class="post-date pull-right"> - Jun  5, 2016</em>
    <h2 class="post-title">Exploring monoids for sum averages</h2>
  </div>
  <p>In <a href="https://www.youtube.com/watch?v=cMY1KVrJk0w">a talk</a> by Avi Bryant about practical systems for Analytics or Aggregation he drew comparisons to Monoids and Abelian Groups. I thought it would be helpful to work through what he was explaining with haskell, so here we go.</p>
<p>The first thing discussed is a simple summing with a monoid. We need implementations for:</p>
<ul>
<li>mempty: somewhere to start; something that won’t affect the outcome of the sum.</li>
<li>mappend: a way of combining 2 instances together, (we’ll use the infix notation or <code>&lt;&gt;</code>)</li>
<li>mconcat: a way of combining a list of instances together down into a single instance (a fold)</li>
</ul>
<p>The point of this abstraction is to easily allow a fold (reduce) of any data type into itself. It doesn’t <em>have</em> to be commutative, but these monoid instances happen to be. (Abelian groups however, <em>have</em> to be commutative)</p>
<h3 id="part-1---a-simple-sum">Part 1 - A simple Sum</h3>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">data</span> <span class="dt">Collection</span> <span class="fu">=</span> <span class="dt">Collection</span> {<span class="ot"> theSum ::</span> <span class="dt">Integer</span> }
<span class="kw">instance</span> <span class="dt">Monoid</span> <span class="dt">Collection</span> <span class="kw">where</span>
  mempty <span class="fu">=</span> <span class="dt">Collection</span> <span class="dv">0</span>
  <span class="dt">Collection</span> sum1 <span class="ot">`mappend`</span> <span class="dt">Collection</span> sum2 <span class="fu">=</span> <span class="dt">Collection</span> (sum1 <span class="fu">+</span> sum2)
  mconcat <span class="fu">=</span> foldl&#39; mconcat mempty</code></pre></div>
<p>That isn’t an astounding monoid instance by any means, but it allows us to do simple summing:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">mconcat [<span class="dt">Collection</span> <span class="dv">1</span>, <span class="dt">Collection</span> <span class="dv">10</span>, <span class="dt">Collection</span> <span class="dv">20</span>]
<span class="co">-- &gt; Collection {theSum = 31}</span>

<span class="co">-- &lt;&gt; is just an operator equivalent to mappend</span>
<span class="dt">Collection</span> <span class="dv">1</span> <span class="fu">&lt;&gt;</span> <span class="dt">Collection</span> <span class="dv">2</span>
<span class="co">-- &gt; Collection { theSum = 3 }</span></code></pre></div>
<h3 id="part-2---a-simple-averaging-aggregation">Part 2 - A simple Averaging aggregation</h3>
<p>The next step is to average the sum as we go.</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">data</span> <span class="dt">Collection</span> <span class="fu">=</span> <span class="dt">Collection</span> 
  {<span class="ot"> theSum ::</span> <span class="dt">Integer</span>
  ,<span class="ot"> avg ::</span> <span class="dt">Maybe</span> <span class="dt">Double</span> }</code></pre></div>
<p>What we’d expect with this is <code>Collection 1 1 &lt;&gt; Collection 10 10</code> to equal <code>Collection {sum = 11, avg = 5.5 }</code></p>
<p>Later on we might want to subtract a Collection from this aggregation or weight the averages. These scenarios can be handled by storing a <code>count</code> of <code>Collections</code> seen so far. Ideally we would have an implicit count instead of a repetitive explicit argument, but for now let’s just add count to the data type and write a quickcheck property for counting:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="co">-- btw, the data type now looks like:</span>
<span class="co">-- { theSum :: Integer, count :: Integer, avg :: Maybe Double }</span>
it <span class="st">&quot;counts consistently&quot;</span> <span class="fu">$</span> property <span class="fu">$</span> \n <span class="ot">-&gt;</span>
  count (mconcat <span class="fu">$</span> replicate n justOnes) <span class="ot">`shouldEqual`</span> n</code></pre></div>
<p>QuickCheck will tell us one error that we probably didn’t consider: What if the count is negative? We shouldn’t allow that, but for now we’re just going to take the absolute value of what quickcheck inputs and test all the positive values of <code>count</code>.</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">count (mconcat <span class="fu">$</span> replicate (abs n) justOnes) <span class="ot">`shouldBe`</span> abs n</code></pre></div>
<p>(I’m fighting the urge to tangent on QuickCheck, but I promise to tackle it in a different post)</p>
<p>Now for the instance definition of our new averaging sum-thingy! I’ll skip over the more trivial parts, but the example repo will be available for a complete look <a href="https://github.com/tippenein/commutative-monoid-example">here</a></p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">
<span class="co">-- The only thing changing here is the mappend definition</span>
<span class="kw">instance</span> <span class="dt">Monoid</span> <span class="dt">Collection</span> <span class="kw">where</span>
  mempty <span class="fu">=</span> <span class="dt">Collection</span> <span class="dv">0</span> <span class="dv">0</span> <span class="dt">Nothing</span>
  <span class="co">-- The cases where average is Nothing are omitted</span>
  (<span class="dt">Collection</span> s1 c1 (<span class="dt">Just</span> avg1)) <span class="ot">`mappend`</span> (<span class="dt">Collection</span> s2 c2 (<span class="dt">Just</span> avg2)) <span class="fu">=</span>
    <span class="dt">Collection</span> (s1 <span class="fu">+</span> s2) (c1 <span class="fu">+</span> c2) average
    <span class="kw">where</span>
      average <span class="fu">=</span> <span class="dt">Just</span> <span class="fu">$</span>
        ((avg1 <span class="fu">*</span> fromInteger c1) <span class="fu">+</span> (avg2 <span class="fu">*</span> fromInteger c2))
          <span class="fu">/</span> (fromInteger c1 <span class="fu">+</span> fromInteger c2)
  mconcat <span class="fu">=</span> foldl&#39; mconcat mempty</code></pre></div>
<p>You might say “That’s just some grade-school weighted average stuff.. childs play!”, and you’d be right!</p>
<h3 id="part-3---the-beauty-of-this-abstraction">Part 3 - The beauty of this abstraction</h3>
<p>Ok, the weighted average is fine.. but what if we also wanted a top 10 aggregation. It turns out we still only need to change a few things to get this aggregation to work.</p>
<p>We might as well drive the implementation with specs since the intention is well defined.</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="co">-- I usually write the intended data type first then use that interface to build specs.</span>
<span class="co">-- so here&#39;s our new fields for the CollectionTops data type</span>
<span class="co">-- { aSum :: Integer, tops :: [Integer] }</span>

topsCollection1 <span class="fu">=</span> <span class="dt">CollectionTops</span> <span class="dv">1</span> (reverse [<span class="dv">1</span><span class="fu">..</span><span class="dv">10</span>])

it <span class="st">&quot;collects the top10&quot;</span> <span class="fu">$</span>
  topsCollection1 <span class="fu">&lt;&gt;</span> mempty <span class="ot">`shouldBe`</span> topsCollection1

it <span class="st">&quot;collects the top10&quot;</span> <span class="fu">$</span> <span class="kw">do</span>
  <span class="kw">let</span> cs <span class="fu">=</span> topsCollection1 <span class="fu">&lt;&gt;</span> <span class="dt">CollectionTops</span> <span class="dv">3000</span> negativeInfinities
  head (tops cs) <span class="ot">`shouldBe`</span> <span class="dv">3000</span>
  (<span class="dv">1</span> <span class="ot">`elem`</span> tops cs) <span class="ot">`shouldBe`</span> <span class="dt">False</span> <span class="co">-- it knocks 1 out of the list</span></code></pre></div>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">negativeInfinities <span class="fu">=</span> replicate <span class="dv">10</span> (<span class="fu">-</span><span class="dv">1</span>)
revSort <span class="fu">=</span> sortBy (flip compare)

<span class="kw">instance</span> <span class="dt">Monoid</span> <span class="dt">CollectionTops</span> <span class="kw">where</span>
  mempty <span class="fu">=</span> <span class="dt">CollectionTops</span> <span class="dv">0</span> negativeInfinities
  <span class="dt">CollectionTops</span> s1 tops1 <span class="ot">`mappend`</span> <span class="dt">CollectionTops</span> s2 tops2 <span class="fu">=</span>
    <span class="dt">CollectionTops</span> {
      aSum <span class="fu">=</span> s1 <span class="fu">+</span> s2
    , tops <span class="fu">=</span> take <span class="dv">10</span> <span class="fu">$</span> revSort ([s1] <span class="fu">++</span> [s2] <span class="fu">++</span> tops1 <span class="fu">++</span> tops2) }
  mconcat <span class="fu">=</span> foldl&#39; mappend mempty</code></pre></div>
<h3 id="part-4---sum-up-pun-intended">Part 4 - Sum up (pun intended)</h3>
<p>In his talk, Avi obviously goes further than this, however, this post is already becoming too long. Other uses hinted at include <a href="https://en.wikipedia.org/wiki/Skewness">skewness</a>, <a href="https://en.wikipedia.org/wiki/Kurtosis">kurtosis</a>, histograms, and unique visitors. The above implementations are intended to give an intuition about commutative monoids as a tool for aggregation.</p>
<p>To sum up…</p>
<ul>
<li>we need 3 functions for a monoid instance: mempty, mappend, and mconcat.</li>
<li>If you can define mappend, the other 2 should be easy (I’ve noticed that mconcat is mostly just used to provide a faster implementation of the standard <code>foldr mappend mempty</code>).</li>
<li>The monoid laws ensure associativity, but we have to be explicit about our commutative intentions.</li>
</ul>
<p>I hope this calms your nerves about monoids and perhaps provides a bit of intuition about what <em>is</em> or <em>could be</em> a monoid.</p>

  <div class="pager">
    <ul class="list-unstyled list-inline">
      
        <li class="previous left">
          <a class="button" href="/posts/2016-04-18-simple-enum-generation.html" data-toggle="tooltip" data-placement="top" title="Previous Post">&larr; Previous Post</a>
        </li>
      

      
        <li class="next right">
          <a class="button" href="/posts/2016-07-29-simple-client-with-wreq.html" data-toggle="tooltip" data-placement="top" title="Next Post">Next Post &rarr;</a>
        </li>
      
    </ul>
  </div>
  <br>
  <br>
</div>
]]></description>
    <pubDate>Sun, 05 Jun 2016 00:00:00 UT</pubDate>
    <guid>http://brdyorn.com/posts/2016-06-05-monoidal-sum.html</guid>
    <dc:creator>Brady Ouren</dc:creator>
</item>
<item>
    <title>Using Template Haskell to generate an Enum</title>
    <link>http://brdyorn.com/posts/2016-04-18-simple-enum-generation.html</link>
    <description><![CDATA[<div class="info">
  <!-- Posted on Apr 18, 2016 -->
  
</div>

<div class="post-body">
  <div class="post-meta">
    <em class="post-date pull-right"> - Apr 18, 2016</em>
    <h2 class="post-title">Using Template Haskell to generate an Enum</h2>
  </div>
  <h3 id="a-simple-useful-case-for-template-haskell">A simple useful case for Template Haskell</h3>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">{-# LANGUAGE TemplateHaskell #-}</span>

<span class="kw">import </span><span class="dt">Language.Haskell.TH</span>

<span class="ot">declareAnimals ::</span> [<span class="dt">String</span>] <span class="ot">-&gt;</span> <span class="dt">Q</span> [<span class="dt">Dec</span>]
declareAnimals animals <span class="fu">=</span>
  return [<span class="dt">DataD</span> constraints name vars cons derives]
    <span class="kw">where</span>
      constraints <span class="fu">=</span> []
      name        <span class="fu">=</span> mkName <span class="st">&quot;Animal&quot;</span>
      vars        <span class="fu">=</span> []
      cons        <span class="fu">=</span> map (\a <span class="ot">-&gt;</span> <span class="dt">NormalC</span> (mkName a) fields) animals
      fields      <span class="fu">=</span> []
      derives     <span class="fu">=</span> [<span class="ch">&#39;&#39;</span><span class="dt">Show</span>, <span class="ch">&#39;&#39;</span><span class="dt">Eq</span>, <span class="ch">&#39;&#39;</span><span class="dt">Ord</span>, <span class="ch">&#39;&#39;</span><span class="dt">Enum</span>, <span class="ch">&#39;&#39;</span><span class="dt">Read</span>]</code></pre></div>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">animals <span class="fu">=</span> [<span class="st">&quot;Aardvark&quot;</span>, <span class="st">&quot;Bobcat&quot;</span>, <span class="st">&quot;Quokka&quot;</span>]
<span class="fu">$</span>(declareAnimals animals)

<span class="co">-- data Signal = Aardvark | Bobcat | Quokka</span></code></pre></div>
<p>If you only cared about getting an enum type, this is where you can jump off.</p>
<h3 id="digging-into-the-types">Digging into the types</h3>
<p>If we look further at the types involved here, we can learn more about what this is doing.</p>
<p>At a high level, we’re simply building a haskell AST and introducing it into our code-base. You can think of this as meta-programming but if you ask me it’s more like playing with legos.</p>
<p>We construct a <code>data</code> declaration with <code>DataD</code></p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dt">DataD</span><span class="ot"> ::</span> <span class="dt">Cxt</span> <span class="ot">-&gt;</span> <span class="dt">Name</span> <span class="ot">-&gt;</span> [<span class="dt">TyVarBndr</span>] <span class="ot">-&gt;</span> [<span class="dt">Con</span>] <span class="ot">-&gt;</span> [<span class="dt">Name</span>] <span class="ot">-&gt;</span> <span class="dt">Dec</span></code></pre></div>
<p>or if we spread this out and document each piece.</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dt">DataD</span><span class="ot"> ::</span> <span class="dt">Cxt</span>          <span class="co">-- constraints (eg. Num a =&gt; a -&gt; a)</span>
      <span class="ot">-&gt;</span> <span class="dt">Name</span>         <span class="co">-- the type name</span>
      <span class="ot">-&gt;</span> [<span class="dt">TyVarBndr</span>]  <span class="co">-- type variable bindings</span>
      <span class="ot">-&gt;</span> [<span class="dt">Con</span>]        <span class="co">-- constructors</span>
      <span class="ot">-&gt;</span> [<span class="dt">Name</span>]       <span class="co">-- deriving types (eg. Eq, Ord, etc)</span>
      <span class="ot">-&gt;</span> <span class="dt">Dec</span></code></pre></div>
<p>simple <code>Name</code> constructor</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">mkName ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">Name</span></code></pre></div>
<p>build a normal Constructor</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dt">NormalC</span><span class="ot"> ::</span> <span class="dt">Name</span> <span class="ot">-&gt;</span> [<span class="dt">StrictType</span>] <span class="ot">-&gt;</span> <span class="dt">Con</span></code></pre></div>
<p>The <code>derives</code> need to have the double-tick in order to be read as a syntax builder rather than an actual deriving statement. The same goes for type constraints and such.</p>
<p>You can look at all this documentation on the <a href="https://hackage.haskell.org/package/template-haskell-2.10.0.0/docs/Language-Haskell-TH-Syntax.html">Language.Haskell.TH</a> page</p>

  <div class="pager">
    <ul class="list-unstyled list-inline">
      
        <li class="previous left">
          <a class="button" href="/posts/2016-03-27-parser-combinators2.html" data-toggle="tooltip" data-placement="top" title="Previous Post">&larr; Previous Post</a>
        </li>
      

      
        <li class="next right">
          <a class="button" href="/posts/2016-06-05-monoidal-sum.html" data-toggle="tooltip" data-placement="top" title="Next Post">Next Post &rarr;</a>
        </li>
      
    </ul>
  </div>
  <br>
  <br>
</div>
]]></description>
    <pubDate>Mon, 18 Apr 2016 00:00:00 UT</pubDate>
    <guid>http://brdyorn.com/posts/2016-04-18-simple-enum-generation.html</guid>
    <dc:creator>Brady Ouren</dc:creator>
</item>
<item>
    <title>Parser Combinatorz part2</title>
    <link>http://brdyorn.com/posts/2016-03-27-parser-combinators2.html</link>
    <description><![CDATA[<div class="info">
  <!-- Posted on Mar 27, 2016 -->
  
</div>

<div class="post-body">
  <div class="post-meta">
    <em class="post-date pull-right"> - Mar 27, 2016</em>
    <h2 class="post-title">Parser Combinatorz part2</h2>
  </div>
  <h3 id="prt2">P▲rT2</h3>
<p>In the <a href="/posts/2016-03-26-parser-combinators.html">previous post</a> I showed how to use <a href="https://www.stackage.org/package/parsec">parsec</a> to parse data in a format like this:</p>
<p><code>&quot;1%400:3.2 6%some_description|100:1&quot;</code></p>
<h3 id="why-not-regex">Why not regex?</h3>
<p>I certainly could’ve used a regex pattern like <code>\d\%(\w*\|)?(\d+):(\d+\.?\d?)</code></p>
<p>…but, there are some scenarios where this falls apart quite quickly:</p>
<ul>
<li>if we learn about other formats of data that can be included</li>
<li>if we have other parsing tasks that need similar matchers?</li>
<li>if we need to morph the data in some way before matching</li>
<li>if the list of possible separators are very large. (<code>\d\%|\$$|\&amp;|...</code>)</li>
</ul>
<h3 id="an-example-to-prove-im-not-making-this-up">An example to prove I’m not making this up</h3>
<p>I had never encountered the acronym FFR until I started working in financial software. It stands for Fixed Format Response, but that’s not really important. The important part is that the FFR we’re dealing with has ~100 different signals which indicate a specific type of data.</p>
<p>So, we’ll create a data type deriving <code>Enum</code> to describe how we expect to split the data up.</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">
<span class="kw">data</span> <span class="dt">Signal</span>
  <span class="fu">=</span> <span class="dt">AD02</span> <span class="fu">|</span> <span class="dt">AD11</span> <span class="fu">|</span> <span class="dt">AH11</span> <span class="fu">|</span> <span class="dt">AM01</span> <span class="fu">|</span>
    <span class="dt">AO01</span> <span class="fu">|</span> <span class="dt">AR01</span> <span class="fu">|</span> <span class="dt">AS01</span> <span class="fu">|</span> <span class="dt">AT11</span> <span class="fu">|</span> <span class="dt">BR01</span> <span class="fu">|</span>
    <span class="co">-- ... more of these removed for reading clarity</span>
    <span class="dt">UA11</span> <span class="fu">|</span> <span class="dt">UF11</span> <span class="fu">|</span> <span class="dt">VH01</span> <span class="fu">|</span> <span class="dt">VS01</span> <span class="fu">|</span> <span class="dt">WS01</span> <span class="fu">|</span>
    <span class="dt">YI01</span> <span class="fu">|</span> <span class="dt">ZC01</span>
  <span class="kw">deriving</span> (<span class="dt">Show</span>, <span class="dt">Enum</span>, <span class="dt">Ord</span>, <span class="dt">Eq</span>, <span class="dt">Read</span>)

<span class="ot">allSignals ::</span> [<span class="dt">String</span>]
allSignals <span class="fu">=</span> map show [<span class="dt">AD02</span> <span class="fu">..</span>]</code></pre></div>
<p>Note: The syntax for <code>allSignals</code> is just enumerating all the constructors. (The space is significant <code>[YourFirstEnum ..]</code>)</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="co">-- notice we&#39;re reusing this from the previous parser</span>
anythingUntil p <span class="fu">=</span> manyTill anyToken p

<span class="ot">anySignal ::</span> <span class="dt">Parser</span> (<span class="dt">Signal</span>, <span class="dt">String</span>)
anySignal <span class="fu">=</span> <span class="kw">do</span>
  signal <span class="ot">&lt;-</span> signalParser
  content <span class="ot">&lt;-</span> anythingUntil (endOfLineOrInput <span class="fu">&lt;|&gt;</span> signalLookahead)
  return (toSignal signal, content)

signalLookahead <span class="fu">=</span> lookAhead signalParser <span class="fu">*&gt;</span> return ()

<span class="ot">signalParser ::</span> <span class="dt">Parser</span> <span class="dt">String</span>
signalParser <span class="fu">=</span> choice <span class="fu">$</span> fmap try <span class="fu">$</span> string <span class="fu">&lt;$&gt;</span> allSignals</code></pre></div>
<p>We’re going to use the <code>anySignal</code> parser to pull out many pieces of content from a string, but the interesting part is the <code>signalParser</code> itself. <code>choice</code> and <code>&lt;|&gt;</code> are the same, but we need to choose between <em>all</em> the signals so we pass a list of Parsers. If it helps, it looks a bit like this if you were to expand it:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">choice [(try <span class="fu">$</span> string <span class="st">&quot;AD02&quot;</span>), (try <span class="fu">$</span> string <span class="st">&quot;AD11&quot;</span>), <span class="fu">...</span>]</code></pre></div>
<p>Another thing to note is the <code>signalLookahead</code>. We need to avoid eating up the next signal and just use it to signal the end of input.</p>
<p>Once again, there’s a freeze of the jupyter notebook if you’d like to see it in the full context (<a href="/slides/ffrparse">here</a>)</p>
<h3 id="further-processing">Further processing</h3>
<p>There are many more things we can do with our data in this format, but the first thing I would do is consume the data into some Map like this:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">type</span> <span class="dt">SignalMap</span> <span class="fu">=</span> <span class="dt">Map.Map</span> <span class="dt">Signal</span> <span class="dt">String</span></code></pre></div>
<p>From here we’d want to inspect what each signal has inside of it, so we can take from this <code>Map</code> and further parse the string content.</p>
<h3 id="credit">Credit</h3>
<p>Thanks a bunch to both of these resources (which are both far better and more comprehensive than this):</p>
<ul>
<li><a href="https://github.com/JakeWheat/intro_to_parsing" class="uri">https://github.com/JakeWheat/intro_to_parsing</a></li>
<li><a href="http://unbui.lt/#!/post/haskell-parsec-basics/" class="uri">http://unbui.lt/#!/post/haskell-parsec-basics/</a></li>
</ul>

  <div class="pager">
    <ul class="list-unstyled list-inline">
      
        <li class="previous left">
          <a class="button" href="/posts/2016-03-26-parser-combinators.html" data-toggle="tooltip" data-placement="top" title="Previous Post">&larr; Previous Post</a>
        </li>
      

      
        <li class="next right">
          <a class="button" href="/posts/2016-04-18-simple-enum-generation.html" data-toggle="tooltip" data-placement="top" title="Next Post">Next Post &rarr;</a>
        </li>
      
    </ul>
  </div>
  <br>
  <br>
</div>
]]></description>
    <pubDate>Sun, 27 Mar 2016 00:00:00 UT</pubDate>
    <guid>http://brdyorn.com/posts/2016-03-27-parser-combinators2.html</guid>
    <dc:creator>Brady Ouren</dc:creator>
</item>
<item>
    <title>Parser Combinatorz part1</title>
    <link>http://brdyorn.com/posts/2016-03-26-parser-combinators.html</link>
    <description><![CDATA[<div class="info">
  <!-- Posted on Mar 26, 2016 -->
  
</div>

<div class="post-body">
  <div class="post-meta">
    <em class="post-date pull-right"> - Mar 26, 2016</em>
    <h2 class="post-title">Parser Combinatorz part1</h2>
  </div>
  <h3 id="the-value-of-composable-parts">The value of composable parts</h3>
<p>I’ve found myself in some strange parsing tasks lately. This is a new thing for me, so don’t take this post as an example of the best practices for parsing. However, FWIW, all the parsers <em>work</em>.</p>
<h3 id="the-setup">The Setup</h3>
<p>Say we have data that looks something like:</p>
<p><code>&quot;1%400:3.2 6%some_description|100:1&quot;</code></p>
<p>First we decide what we’re trying to pull out of this. These values happen to be space separated so we can just use the Prelude’s <code>words</code></p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">words theString
<span class="fu">&gt;</span> [<span class="st">&quot;1%400:3.2&quot;</span>, <span class="st">&quot;6%some_description|100:1&quot;</span>]</code></pre></div>
<p>Each string in this list we’ll call a <code>Feature</code> so we write a data type for it:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">data</span> <span class="dt">Feature</span>
  <span class="fu">=</span> <span class="dt">Feature</span>
  {<span class="ot"> row        ::</span> <span class="dt">String</span>
  ,<span class="ot"> col        ::</span> <span class="dt">String</span>
  ,<span class="ot"> value      ::</span> <span class="dt">String</span>
  ,<span class="ot"> descriptor ::</span> <span class="dt">Maybe</span> <span class="dt">String</span>
  } <span class="kw">deriving</span> (<span class="dt">Show</span>)</code></pre></div>
<p>Notice that we’re just reading this in as String data at the moment, but we can easily change that once we get the parsing structure down.</p>
<p>Anyway, almost done with the easy stuff. We need to pull the garbage data out somehow. That’s cool, we’ll just write out our signal matchers.</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">breakSep <span class="fu">=</span> string <span class="st">&quot;%&quot;</span>
kvSep <span class="fu">=</span> string <span class="st">&quot;:&quot;</span>
descriptionSep <span class="fu">=</span> string <span class="st">&quot;|&quot;</span></code></pre></div>
<h3 id="the-actual-parsing">The Actual Parsing</h3>
<p>Since we’ll be slurping up data until we hit one of the above defined separators, we’ll make a parser to do just that:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">anythingUntil ::</span> <span class="dt">Parser</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">Parser</span> <span class="dt">String</span>
anythingUntil p <span class="fu">=</span> manyTill anyToken (p <span class="fu">*&gt;</span> return ())</code></pre></div>
<p>This function eats up any type of input until it hits one of our separators and returns everything before it.</p>
<p>The way we’ll use this is pretty simple</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">
<span class="ot">featureP ::</span> <span class="dt">Parser</span> <span class="dt">Feature</span>
featureP <span class="fu">=</span> <span class="kw">do</span>
  row <span class="ot">&lt;-</span> anythingUntil breakSep
  desc <span class="ot">&lt;-</span> descriptorP
  col <span class="ot">&lt;-</span> anythingUntil kvSep
  value <span class="ot">&lt;-</span> manyTill anyToken eof <span class="co">-- get the remaining</span>
  return <span class="fu">$</span> <span class="dt">Feature</span> row col value desc</code></pre></div>
<p>Now we need to fill in the optional <code>descriptor</code> parser</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">descriptorP ::</span> <span class="dt">Parser</span> (<span class="dt">Maybe</span> <span class="dt">String</span>)
descriptorP <span class="fu">=</span> optionMaybe <span class="fu">$</span> try <span class="fu">$</span> anythingUntil descSep</code></pre></div>
<p><code>optionMaybe</code> allows us to optionally consume some data and return a Maybe value.</p>
<p>Since the anythingUntil parser <em>can</em> fail in this case, we need to use <code>try</code> to save us from erroring out.</p>
<h3 id="the-benefit-over-x">The Benefit over X</h3>
<p>Personally, I find this easier to reason about than a regex or generic string functions. The point here is that I can easily expand on this and add new detailed parsers (This will be covered in <a href="/posts/2016-03-27-parser-combinators2.html">part 2</a>)</p>
<p>I’ve included a snapshot of the ihaskell session I was working in for full context <a href="/slides/features_ipynb.html">here</a></p>

  <div class="pager">
    <ul class="list-unstyled list-inline">
      
        <li class="previous left">
          <a class="button" href="/posts/2015-12-12-servant-patterns-for-clients.html" data-toggle="tooltip" data-placement="top" title="Previous Post">&larr; Previous Post</a>
        </li>
      

      
        <li class="next right">
          <a class="button" href="/posts/2016-03-27-parser-combinators2.html" data-toggle="tooltip" data-placement="top" title="Next Post">Next Post &rarr;</a>
        </li>
      
    </ul>
  </div>
  <br>
  <br>
</div>
]]></description>
    <pubDate>Sat, 26 Mar 2016 00:00:00 UT</pubDate>
    <guid>http://brdyorn.com/posts/2016-03-26-parser-combinators.html</guid>
    <dc:creator>Brady Ouren</dc:creator>
</item>
<item>
    <title>Servant Patterns for Clients</title>
    <link>http://brdyorn.com/posts/2015-12-12-servant-patterns-for-clients.html</link>
    <description><![CDATA[<div class="info">
  <!-- Posted on Dec 12, 2015 -->
  
</div>

<div class="post-body">
  <div class="post-meta">
    <em class="post-date pull-right"> - Dec 12, 2015</em>
    <h2 class="post-title">Servant Patterns for Clients</h2>
  </div>
  <p>Edit: I believe Servant has changed its Client api; I’ll link to an update when one exists.</p>
<h3 id="clients-for-free">Clients for Free</h3>
<p>The unfortunate reality of many of our day jobs is that we are <em>not</em> able to replace existing services with haskell. However, don’t despair! We can still write services which consume our existing services quite easily with <a href="https://github.com/haskell-servant/servant">Servant</a>.</p>
<p>I’ve picked up some patterns for writing clean haskell code from <a href="https://github.com/tfausak/factory">tfausak</a> and they’ve all come together in a working user client.</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">data</span> <span class="dt">User</span> <span class="fu">=</span> <span class="dt">User</span> {
<span class="ot">    id             ::</span> <span class="dt">Int</span>
  ,<span class="ot"> email          ::</span> <span class="dt">Text</span>
  ,<span class="ot"> first_name     ::</span> <span class="dt">Text</span>
  ,<span class="ot"> last_name      ::</span> <span class="dt">Text</span>
  ,<span class="ot"> dob            ::</span> <span class="dt">Day</span>
  } <span class="kw">deriving</span> (<span class="dt">Show</span>, <span class="dt">Generic</span>, <span class="dt">ToJSON</span>, <span class="dt">FromJSON</span>)

<span class="kw">data</span> <span class="dt">UsersResponse</span> <span class="fu">=</span> <span class="dt">UsersResponse</span> {
<span class="ot">  users ::</span> [<span class="dt">User</span>]
  } <span class="kw">deriving</span> (<span class="dt">Show</span>, <span class="dt">Generic</span>, <span class="dt">FromJSON</span>, <span class="dt">ToJSON</span>)

run action <span class="fu">=</span> <span class="kw">do</span>
  result <span class="ot">&lt;-</span> <span class="dt">Either</span><span class="fu">.</span>runEitherT action
  <span class="kw">case</span> result <span class="kw">of</span>
    <span class="dt">Left</span> message <span class="ot">-&gt;</span> error (show message)
    <span class="dt">Right</span> x <span class="ot">-&gt;</span> return x

<span class="kw">type</span> <span class="dt">UserAPI</span> <span class="fu">=</span>
       <span class="dt">GetUsers</span>
  <span class="fu">:&lt;|&gt;</span> <span class="dt">GetUser</span>
  <span class="fu">:&lt;|&gt;</span> <span class="dt">CreateUser</span>
  <span class="fu">:&lt;|&gt;</span> <span class="dt">UpdateUser</span>
  <span class="fu">:&lt;|&gt;</span> <span class="dt">DestroyUser</span>


<span class="kw">type</span> <span class="dt">GetUsers</span> <span class="fu">=</span> <span class="st">&quot;user&quot;</span> <span class="fu">:&gt;</span> <span class="st">&quot;users&quot;</span>
    <span class="fu">:&gt;</span> <span class="dt">QueryParam</span> <span class="st">&quot;id&quot;</span> <span class="dt">Int</span>
    <span class="fu">:&gt;</span> <span class="dt">QueryParam</span> <span class="st">&quot;email&quot;</span> <span class="dt">Text</span>
    <span class="fu">:&gt;</span> <span class="dt">Get</span> <span class="ch">&#39;[JSON] UsersResponse</span>

<span class="kw">type</span> <span class="dt">GetUser</span> <span class="fu">=</span> <span class="st">&quot;user&quot;</span> <span class="fu">:&gt;</span> <span class="st">&quot;users&quot;</span>
    <span class="fu">:&gt;</span> <span class="dt">Capture</span> <span class="st">&quot;id&quot;</span> <span class="dt">Integer</span>
    <span class="fu">:&gt;</span> <span class="dt">Get</span> <span class="ch">&#39;[JSON] User</span>

<span class="kw">type</span> <span class="dt">CreateUser</span> <span class="fu">=</span>  <span class="st">&quot;user&quot;</span> <span class="fu">:&gt;</span> <span class="st">&quot;users&quot;</span>
    <span class="fu">:&gt;</span> <span class="dt">ReqBody</span> <span class="ch">&#39;[JSON] User</span>
    <span class="fu">:&gt;</span> <span class="dt">Post</span> <span class="ch">&#39;[JSON] User</span>

<span class="kw">type</span> <span class="dt">UpdateUser</span> <span class="fu">=</span> <span class="st">&quot;user&quot;</span> <span class="fu">:&gt;</span> <span class="st">&quot;users&quot;</span>
    <span class="fu">:&gt;</span> <span class="dt">Capture</span> <span class="st">&quot;id&quot;</span> <span class="dt">Integer</span>
    <span class="fu">:&gt;</span> <span class="dt">ReqBody</span> <span class="ch">&#39;[JSON] User</span>
    <span class="fu">:&gt;</span> <span class="dt">Put</span> <span class="ch">&#39;[JSON] User</span>

<span class="kw">type</span> <span class="dt">DestroyUser</span> <span class="fu">=</span> <span class="st">&quot;user&quot;</span> <span class="fu">:&gt;</span> <span class="st">&quot;users&quot;</span>
    <span class="fu">:&gt;</span> <span class="dt">Capture</span> <span class="st">&quot;id&quot;</span> <span class="dt">Integer</span>
    <span class="fu">:&gt;</span> <span class="dt">Delete</span> <span class="ch">&#39;[JSON] User</span>

getUsers <span class="fu">:&lt;|&gt;</span> getUser <span class="fu">:&lt;|&gt;</span> createUser <span class="fu">:&lt;|&gt;</span> updateUser <span class="fu">:&lt;|&gt;</span> destroyUser <span class="fu">=</span>
  client (<span class="dt">Proxy</span><span class="ot"> ::</span> <span class="dt">Proxy</span> <span class="dt">UserAPI</span>) (<span class="dt">BaseUrl</span> <span class="dt">Http</span> <span class="st">&quot;localhost&quot;</span> <span class="dv">5000</span>)</code></pre></div>
<p>With these client functions defined and assuming you have a user service instance running on port 5000 we can test this code out with <code>stack ghci servant-server servant-client --resolver=lts-3.14</code></p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="co">-- &gt; :load Main.hs</span>

<span class="co">-- to get a specific user</span>
run <span class="fu">$</span> getUser <span class="dv">10001035</span>

<span class="co">-- to query on an attribute</span>
run <span class="fu">$</span> getUsers <span class="dt">Nothing</span> (<span class="dt">Just</span> <span class="st">&quot;garybusey@example.com&quot;</span>)</code></pre></div>
<p>The only thing to add for production-ready status is a header with auth-tokens, but it really goes to show the ease of generating clients with Servant.</p>

  <div class="pager">
    <ul class="list-unstyled list-inline">
      
        <li class="previous left">
          <a class="button" href="/posts/2015-06-04-partial-application.html" data-toggle="tooltip" data-placement="top" title="Previous Post">&larr; Previous Post</a>
        </li>
      

      
        <li class="next right">
          <a class="button" href="/posts/2016-03-26-parser-combinators.html" data-toggle="tooltip" data-placement="top" title="Next Post">Next Post &rarr;</a>
        </li>
      
    </ul>
  </div>
  <br>
  <br>
</div>
]]></description>
    <pubDate>Sat, 12 Dec 2015 00:00:00 UT</pubDate>
    <guid>http://brdyorn.com/posts/2015-12-12-servant-patterns-for-clients.html</guid>
    <dc:creator>Brady Ouren</dc:creator>
</item>
<item>
    <title>Partial Application for real</title>
    <link>http://brdyorn.com/posts/2015-06-04-partial-application.html</link>
    <description><![CDATA[<div class="info">
  <!-- Posted on Jun  4, 2015 -->
  
</div>

<div class="post-body">
  <div class="post-meta">
    <em class="post-date pull-right"> - Jun  4, 2015</em>
    <h2 class="post-title">Partial Application for real</h2>
  </div>
  <h3 id="intuitive-solutions">Intuitive Solutions</h3>
<p>While working on <a href="http://github.com/tippenein/BankHoliday">a library</a> recently, I came across an elegant use of partial application.</p>
<p>How would we model the first monday in any given month. Firstly I needed a way of passing around the concept of a <code>month</code> which ends up being simply <code>fromGregorian</code> applied to a year and month index.</p>
<p>The type signature being: <code>fromGregorian :: Integer -&gt; Int -&gt; Int -&gt; Day</code></p>
<p>So, a month, when partially applied, becomes a function taking an <code>Int</code> and returning a <code>Day</code> which is exactly what we want.</p>
<p>A common scenario for a bank holiday library is “first monday in <em>month</em>” and with our ability to pass in “months” to a function we define it this way:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">[jan, feb, mar] <span class="fu">=</span> map (fromGregorian <span class="dv">1999</span>) [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>]

firstMondayIn month <span class="fu">=</span> addDays offset (month <span class="dv">07</span>)
  <span class="kw">where</span>
    offset <span class="fu">=</span> negate (weekIndex (month <span class="dv">02</span>))

weekIndex day <span class="fu">=</span> toModifiedJulianDay day <span class="ot">`mod`</span> <span class="dv">7</span></code></pre></div>
<p>The most difficult part here was figuring out how Julian time worked, but the solution ends up being super readable.</p>
<p>The other scenario for describing US bank holidays is the case where a holiday falls on a weekend.</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">january_holidays <span class="fu">=</span> [weekendHolidayFrom (jan <span class="dv">1</span>), weekendHolidayFrom (jan <span class="dv">20</span>)]

<span class="ot">weekendHolidayFrom ::</span> <span class="dt">Day</span> <span class="ot">-&gt;</span> <span class="dt">Maybe</span> <span class="dt">Day</span>
weekendHolidayFrom d <span class="fu">=</span> <span class="kw">case</span> weekIndex d <span class="kw">of</span>
  <span class="dv">3</span> <span class="ot">-&gt;</span> <span class="dt">Nothing</span>            <span class="co">-- saturday</span>
  <span class="dv">4</span> <span class="ot">-&gt;</span> <span class="dt">Just</span> (addDays <span class="dv">1</span> d) <span class="co">-- sunday</span>
  _ <span class="ot">-&gt;</span> <span class="dt">Just</span> d</code></pre></div>
<p>From here, we have a list of <code>Maybe Day</code>’s so we need to filter them down to <code>Day</code>s. There’s probably a better way of doing this, but I used <code>mapMaybe</code> because of the type: <code>(a -&gt; Maybe b) -&gt; [a] -&gt; [b]</code></p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">mapMaybe id january_holidays</code></pre></div>
<h3 id="the-subtle-benefit">The subtle benefit</h3>
<p>There is plenty said about the benefits of partial application or the lack thereof, but this isn’t really about that. It’s about the ease of prototyping this sort of solution. From what I can tell, the equivalent ruby solution would not have been as clean, <em>because</em> of the lack of first class partial application.</p>
<p>I’m also amused by this application because most other cases I read have seemingly contrived examples whereas this seems natural to me</p>

  <div class="pager">
    <ul class="list-unstyled list-inline">
      
        <li class="previous left">
          <a class="button" href="/posts/2014-12-10-rspec-pattern-for-testing-permissions.html" data-toggle="tooltip" data-placement="top" title="Previous Post">&larr; Previous Post</a>
        </li>
      

      
        <li class="next right">
          <a class="button" href="/posts/2015-12-12-servant-patterns-for-clients.html" data-toggle="tooltip" data-placement="top" title="Next Post">Next Post &rarr;</a>
        </li>
      
    </ul>
  </div>
  <br>
  <br>
</div>
]]></description>
    <pubDate>Thu, 04 Jun 2015 00:00:00 UT</pubDate>
    <guid>http://brdyorn.com/posts/2015-06-04-partial-application.html</guid>
    <dc:creator>Brady Ouren</dc:creator>
</item>
<item>
    <title>rspec pattern for testing permissions</title>
    <link>http://brdyorn.com/posts/2014-12-10-rspec-pattern-for-testing-permissions.html</link>
    <description><![CDATA[<div class="info">
  <!-- Posted on Dec 10, 2014 -->
  
</div>

<div class="post-body">
  <div class="post-meta">
    <em class="post-date pull-right"> - Dec 10, 2014</em>
    <h2 class="post-title">rspec pattern for testing permissions</h2>
  </div>
  <h3 id="a-problem-youre-bound-to-face">A problem you’re bound to face</h3>
<p>Most projects will run into the problem of testing multiple levels of permissions with rspec at some point. The project I was on came up with what I take to be the most sane way of tackling permission testing with rspec.</p>
<p>For example, say you’re trying to test success and failure of 3 different authorization settings. You might try this to accomplish permission testing on each controller action:</p>
<div class="sourceCode"><pre class="sourceCode ruby"><code class="sourceCode ruby">before <span class="kw">do</span>
  permissions
<span class="kw">end</span>

context <span class="st">&quot;as a super admin&quot;</span> <span class="kw">do</span>
  let(<span class="st">:permissions</span>) { stub_an_admin }

  it <span class="st">&quot;allows them to do this action&quot;</span> <span class="kw">do</span>
    ...
  <span class="kw">end</span>
<span class="kw">end</span>

context <span class="st">&quot;as a plebian user&quot;</span> <span class="kw">do</span>
  let(<span class="st">:permissions</span>) { stub_some_permissions }

  it <span class="st">&quot;disallows this action&quot;</span> <span class="kw">do</span>
    ...
  <span class="kw">end</span>
<span class="kw">end</span></code></pre></div>
<h3 id="a-more-centralized-solution">A more centralized solution</h3>
<p>Setting the permissions in each context for a higher level before block is both confusing and spreads permission logic out over every controller spec. What we want is to have a central location where permission logic for specs can be accessed. This of course assumes you have a permission system with a relatively complex hierarchy of needs (If you don’t now, you probably will in the future).</p>
<p>Ideally we would want to test controller actions like this:</p>
<div class="sourceCode"><pre class="sourceCode ruby"><code class="sourceCode ruby">as_admin_on <span class="st">:some_resource</span> <span class="kw">do</span>
  it <span class="st">&quot;allows this action&quot;</span> <span class="kw">do</span>
    ...
  <span class="kw">end</span>
<span class="kw">end</span></code></pre></div>
<p>This shows clearly what permission level we expect right out front and doesn’t require defining permission stubbing logic in each context. Luckily we can do this by using a controller macro to write new contexts for given permissions.</p>
<p>To centralize permission stubbing we use <code>support/controller_macros.rb</code> to contain all the contexts. (don’t forget to add the module to your <code>rails_helper.rb</code>)</p>
<div class="sourceCode"><pre class="sourceCode ruby"><code class="sourceCode ruby"><span class="kw">module</span> <span class="dt">ControllerMacros</span>
  <span class="kw">module</span> <span class="dt">ClassMethods</span>
    <span class="kw">def</span> as_admin_on(resource_type, &amp;block)
      context <span class="st">&quot;as an Admin&quot;</span> <span class="kw">do</span>
        before <span class="kw">do</span>
          stub_permissions_for(send(resource_type))
          try(<span class="st">:request!</span>)
        <span class="kw">end</span>

        class_exec(&amp;block)
      <span class="kw">end</span>
    <span class="kw">end</span>

    <span class="kw">def</span> as_plebian_user(&amp;block)
      context <span class="st">&quot;with no permissions&quot;</span> <span class="kw">do</span>
        before <span class="kw">do</span>
          stub_basic_user
          try(<span class="st">:request!</span>)
        <span class="kw">end</span>

        class_exec(&amp;block)
      <span class="kw">end</span>
    <span class="kw">end</span>
  <span class="kw">end</span>
<span class="kw">end</span></code></pre></div>
<p>This to me makes it very explicit what permission spec is being tested for each case and if stubbing methods change, you have one central location to change.</p>
<p>Shoutout to <a href="http://chrisarcand.com">chris arcand</a> for this solution to organizing permissions testing.</p>

  <div class="pager">
    <ul class="list-unstyled list-inline">
      
        <li class="previous left">
          <a class="button" href="/posts/2014-11-23-reverse-sort-versus-flip-compare.html" data-toggle="tooltip" data-placement="top" title="Previous Post">&larr; Previous Post</a>
        </li>
      

      
        <li class="next right">
          <a class="button" href="/posts/2015-06-04-partial-application.html" data-toggle="tooltip" data-placement="top" title="Next Post">Next Post &rarr;</a>
        </li>
      
    </ul>
  </div>
  <br>
  <br>
</div>
]]></description>
    <pubDate>Wed, 10 Dec 2014 00:00:00 UT</pubDate>
    <guid>http://brdyorn.com/posts/2014-12-10-rspec-pattern-for-testing-permissions.html</guid>
    <dc:creator>Brady Ouren</dc:creator>
</item>
<item>
    <title>Comparing reverse sort and flip compare</title>
    <link>http://brdyorn.com/posts/2014-11-23-reverse-sort-versus-flip-compare.html</link>
    <description><![CDATA[<div class="info">
  <!-- Posted on Nov 23, 2014 -->
  
</div>

<div class="post-body">
  <div class="post-meta">
    <em class="post-date pull-right"> - Nov 23, 2014</em>
    <h2 class="post-title">Comparing reverse sort and flip compare</h2>
  </div>
  <h3 id="comparing-flip-compare">Comparing flip compare</h3>
<p>GHCmod-vim hinted at an improvement in some code I was writing:</p>
<p><code>reverse $ sort</code> why not <code>sortBy (flip compare)</code></p>
<p>So I looked at the type signatures for each of these.</p>
<pre><code>λ &gt; :t reverse $ sort
λ &gt; Ord a =&gt; [a] -&gt; [a]

λ &gt; :t sortBy
λ &gt; (a -&gt; a -&gt; Ordering) -&gt; [a] -&gt; [a]

λ &gt; :t (flip compare)
λ &gt; Ord b =&gt; b -&gt; b -&gt; Ordering</code></pre>
<p><code>flip</code> is just <code>f x y = f y x</code></p>
<p>A little reminder of how <code>compare</code> works:</p>
<pre><code>λ &gt; compare 1 2
λ &gt; LT
λ &gt; flip compare 1 2
λ &gt; GT</code></pre>
<p>This is the part that wasn’t obvious to me; that by simply flipping the comparison we’re reversing the resulting sorted list. At that point we can see that <code>sortBy</code> is traversing the list once whereas <code>reverse $ sort</code> is running through the list twice.</p>

  <div class="pager">
    <ul class="list-unstyled list-inline">
      
        <li class="previous left">
          <a class="button" href="/posts/2013-08-20-feature_or_defect_p1.html" data-toggle="tooltip" data-placement="top" title="Previous Post">&larr; Previous Post</a>
        </li>
      

      
        <li class="next right">
          <a class="button" href="/posts/2014-12-10-rspec-pattern-for-testing-permissions.html" data-toggle="tooltip" data-placement="top" title="Next Post">Next Post &rarr;</a>
        </li>
      
    </ul>
  </div>
  <br>
  <br>
</div>
]]></description>
    <pubDate>Sun, 23 Nov 2014 00:00:00 UT</pubDate>
    <guid>http://brdyorn.com/posts/2014-11-23-reverse-sort-versus-flip-compare.html</guid>
    <dc:creator>Brady Ouren</dc:creator>
</item>
<item>
    <title>Let's play 'Feature or Defect!'</title>
    <link>http://brdyorn.com/posts/2013-08-20-feature_or_defect_p1.html</link>
    <description><![CDATA[<div class="info">
  <!-- Posted on Aug 20, 2013 -->
  
</div>

<div class="post-body">
  <div class="post-meta">
    <em class="post-date pull-right"> - Aug 20, 2013</em>
    <h2 class="post-title">Let's play 'Feature or Defect!'</h2>
  </div>
  <h3 id="lolwhut">Lolwhut?!</h3>
<p>Sometimes you run into programming language “features” that make you wonder if that was the intended effect. This particular one involves python and a mutable default function argument. Here’s a quick example:</p>
<!--more-->
<pre><code>&gt;&gt;&gt; def foo(a=[]):
...   a.append(1)
...   return a
... 
&gt;&gt;&gt; foo()
[1]
&gt;&gt;&gt; foo()
[1, 1]
&gt;&gt;&gt; foo()
[1, 1, 1]
&gt;&gt;&gt; foo()
[1, 1, 1, 1]</code></pre>
<p>On the one hand, this can be used as a weird little way of caching items. Since <code>a</code> is mutable, it acts as a global variable. To me, this is counterintuitive. If I say, <code>def foo(a=[]):</code> I expect <code>a</code> to be an empty list every time I run that function unless I tell it otherwise.</p>

  <div class="pager">
    <ul class="list-unstyled list-inline">
      
        <li class="previous left">
          <a class="button" href="/posts/2013-07-25-rest-exceptions-with-decorators.html" data-toggle="tooltip" data-placement="top" title="Previous Post">&larr; Previous Post</a>
        </li>
      

      
        <li class="next right">
          <a class="button" href="/posts/2014-11-23-reverse-sort-versus-flip-compare.html" data-toggle="tooltip" data-placement="top" title="Next Post">Next Post &rarr;</a>
        </li>
      
    </ul>
  </div>
  <br>
  <br>
</div>
]]></description>
    <pubDate>Tue, 20 Aug 2013 00:00:00 UT</pubDate>
    <guid>http://brdyorn.com/posts/2013-08-20-feature_or_defect_p1.html</guid>
    <dc:creator>Brady Ouren</dc:creator>
</item>

    </channel>
</rss>
